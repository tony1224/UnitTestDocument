= どこをUnit Testすべきなのか
- DDDの設計に沿って書くとテスト観点がわかるよ
- DDDとは
- sampmleコードをいかに書きました(GithubURLの紹介)のでそれを参考に

・テストするのは
ドメイン
UI(VM)
UseCase
Infra


ViewModelはBind観点 -> InputされたらOutputしたい のみ
-> 画面ロードしたら新着バッジを表示したい Viewの観点のみ
最新の情報が欲しい(UC) 実作業は想定していない？ エンジニア側の要件定義
-> 今の情報を比較する(Sservice) 実作業 (やり方は想定しない) 基本設計
-> 保持したい(Service) 実作業
-> DO単体で振る舞えるのであればServiceは不要
-> UDにデータ保持 実処理(技法) 詳細設計
checkNewColumnUC()
storeNewColmnUC()

▼VMのテスト観点
・Outputが全て正しく実現できること
・自分の場合TestsとOutputsとしっかり書いた方が良い
　-> 仕様をしっかり把握できているかの確認になる
-> 本来のTDD

・ViewModelはイベント管理
　-> メソッドが想定した値を返すこと
　　-> nil許容の場合はnilであるケースも
　　　-> 想定した値と一致していること
　　-> nil許容しない場合はnilでないこと
　　　-> 想定した値と一致していること

▼ViewModel
・イベントごと単位でのテスト
・ロードイベント時にXXUCを走らせ想定した結果を返すこと
・条件ありのパタン, 無しのパタン
  -> 引数うむ
・返り値ありのパタン, 無しのパタン
・Rxな返り値を想定している

VMはInputされたことに対しOutputが想定通りであることを確認する
-> View絡み(削除後こういうデータを返す)とかがあればそれをテストする
-> 今日やろうとしていたCompletableかどうかはどちらかというとUC観点
-> なのでVM側でTODOコメで全部書かない、なんてことは無い 
-> VM側の保持するデータの差分が発生する処理であれば、それを確認するべき


最終的にうちのチームで出た定義
## ViewModelのテストについて
ViewModelは システムイベントや、ユーザーからのインプットをトリガーとして、BindingDataの操作やドメインの操作(UseCaseを経由)を行い、結果をOutputとしてViewに返すのが仕事です。
ViewModelのテストは、

- アウトプットの初期値を設定
- ダミーのインプットパラメータと操作後の理想のアウトプットの定義
- UseCaseのモックの定義
- ダミーのインプットをViewModelに実行
- アウトプットと、理想のアウトプットを比較する

という手順で行います
