= はじめに
「隙間時間で始めるiOSのユニットテスト」を手に取って頂きありがとうございます。

== 本書の狙い
皆さんは普段ユニットテストを実施しておりますでしょうか。
ユニットテストは主に2種類あり、<b>自動</b>によるものと<b>手動</b>によるものとがあります。
僕はこれまで幾つかのiOSの開発現場にジョインしてきましたが、残念なことにユニットテストの自動化を実践していた現場はほとんどありませんでした。

そしていざリリース。見つかる不具合。原因を探ると<b>単体テストレベルの実装ミスだった</b>。こんな経験はありませんか？
単体テストの質が甘かった。ではどうすれば良いか。更にテスト項目を増やすのは良いですが、それらをずっと手動でやり続ける工数はとてつもなくかかるはずです。
この本はテストコードを書いたことが無い、または書いてみたいけど<b>何をいつ、どう書いて良いかわからない</b>といった方々に対し、私が感じているテストコードや単体テストのあり方について書いて行きたいと思っております。

== 注意点
1.本書は皆さんの現状に対し、無理強いしてまでテストコードを薦めようというものではありません。

* このような状況を満たしたらテストコードは書ける
* ここまでいけば(時間は無いにしても)テストを書ける状況になりうる
* 逆に無理にテストコードは実施せず、手動テストによる品質担保をした方が良い場合

といった点を考慮した上で、ユニットテストはこんな感じで書けるよ！を提唱したユニットテスト初心者の方々に向けたものとなっております。

2.本書は単体テストの指南書を目指したものではありません。
詳しくは「なぜユニットテストを書くのか」でまとめますが、本書では<b>テストセカンド</b>という言葉を使い「断片的にでも、少しづづテストコードを書くことに慣れよう、食わず嫌いを無くそう」をテーマにしております。


そのため、書いている内容・書いていない内容を含め、ある程度対象読者を絞ったものとなっております。
皆さんに望まれていた1冊になっていれば幸いです。

== 書いている内容
目次をご覧ください

== 対象読者
* 普段iOSのコードを書いている方
* 普段ユニットテストを
    * 手動でのみ行なっている方
    * 書いたことが無い方
    * 書きたいけど時間が無い方
* ユニットテストをいつ、何を、どのように書いたら良いかわからない方

== 書いていない内容
* Swiftの書き方
* Xcodeの使い方
* UI Testの書き方

== お問い合わせ
本書に関するお問い合わせは
https://twitter.com/kamui_project
までお願い致します。

== 免責事項
本書に記載された内容は、情報の提供のみを目的としています。
従って、本書を用いた開発・運用はご自身の責任と判断によって行うようお願い致します。
これらの情報による開発・運用の結果について、著者はいかなる責任を負いません。
